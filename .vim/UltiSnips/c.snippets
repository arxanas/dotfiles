snippet hguard
#ifndef ${1:HEADER}
#define $1

${0:${VISUAL}}

#endif
endsnippet

# User include.
snippet incu
#include "${0:`!p snip.rv = file_basename()`.h}"
endsnippet

# System include.
snippet incs
#include <${0:iostream}>
endsnippet

snippet main
int main(${1:int argc, const char* argv[]}) {
    ${0:${VISUAL}}
}
endsnippet

snippet if
if (${1:cond}) {
    ${0:${VISUAL}}
}
endsnippet

snippet ife
if (${1:cond}) {
    ${2:${VISUAL}}
} else {
    ${0}
}
endsnippet

snippet else
else {
    ${0:${VISUAL}}
}
endsnippet

snippet for
for (${1:int ${2:i} = 0}; ${3:$2 < ${4:size}}; ${5:$2++}) {
    ${0:${VISUAL}}
}
endsnippet

snippet while
while (${1:cond}) {
    ${0:${VISUAL}}
}
endsnippet

snippet switch
switch (${1:value}) {
    ${0:${VISUAL}}
}
endsnippet

snippet case
case ${1:value}:
    ${0:${VISUAL}}
    break;
endsnippet

snippet default
default:
    ${0:${VISUAL}}
    break;
endsnippet

snippet ret
return ${0};
endsnippet

snippet func
${1:void} ${2:func}(${3}) {
    ${0:${VISUAL}}
}
endsnippet

snippet void
void ${1:func}(${2}) {
    ${0:${VISUAL}}
}
endsnippet

snippet decl
${1:void} ${2:func}(${3});
endsnippet

snippet sizeof
sizeof(${1:${VISUAL:arr}}) / sizeof($1[0])
endsnippet

global !p
def file_basename():
    return os.path.splitext(fn)[0]
endglobal
